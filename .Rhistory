lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"],
color = "ave_departure_delay",
color_continuous_name="Average Departure Delay"
)
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"],
color = "ave_departure_delay"
)
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"],
color = "ave_departure_delay",
)
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"],
color = "ave_departure_delay",
)
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(legend_title_text="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(legend_title_text="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
legend_title_text="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
legend_title_text="Average Departure Delay",
color_continuous_title="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay",
color_continuous_title="Average Departure Delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
legend_title_text="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
legend_title_text="Average Departure Delay")
fig.update_layout(coloraxis_colorbar_title="Average Departure Delay")
fig.show()
import pandas as pd
import plotly.express as px
ports_with_location = pd.read_csv("ports_with_location_copy.csv")
fig = px.scatter_geo(
data_frame = ports_with_location,
lat = "latitude_deg",
lon = "longitude_deg",
hover_name="name", # column added to hover information
projection="albers usa",
hover_data=["ave_departure_delay", "ave_arrival_delay"], # Data displayed in hover boxes
color = "ave_departure_delay"
)
# Country and state boundaries
fig.update_geos(
showcountries=True, countrycolor="Black",
showsubunits=True, subunitcolor="Blue",
)
# Custom text in boxes
fig.update_traces(hovertemplate='<b>%{hovertext}</b><br>' +
'Average Departure Delay: %{customdata[0]:.2f} min<br>' +
'Average Arrival Delay: %{customdata[1]:.2f} min<br>' +
'<extra></extra>')
fig.update_layout(title_text = "Average Delays at American Airports",
coloraxis_colorbar_title="Average Departure Delay")
fig.show()
shiny::runApp('Documents/Data Visualizations/Shiny_Intro')
library(shiny)
mlb <- read_csv("mlb23.csv")
??read_csv
mlb <- read.csv("mlb23.csv")
mlb <- read.csv("mlb23.csv")
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
?na.omit
runApp('Documents/Data Visualizations/Shiny_Intro')
?transmute
runApp('Documents/Data Visualizations/Shiny_Intro')
?remove
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
?geom_smooth
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
?req
runApp('Documents/Data Visualizations/Shiny_Intro')
nearPoints(mlb_data, input$plot_click, xvar = input$x_var, yvar = input$y_var)
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
req(input$plot_click)
req(input$plot_click)
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
?nearPoints
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
?nearPoints
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
runApp('Documents/Data Visualizations/Shiny_Intro')
install.packages('rsconnect')
install.packages(c("bslib", "callr", "dbplyr", "deldir", "earth", "finetune", "forecast", "fracdiff", "future", "htmltools", "httpuv", "igraph", "infer", "lattice", "leaflet", "Matrix", "parsnip", "pkgbuild", "processx", "ragg", "RcppArmadillo", "RcppEigen", "remotes", "repr", "rsample", "rstudioapi", "sass", "sf", "shiny", "tidymodels", "tinytex", "tune", "workflowsets", "xfun", "yardstick"))
install.packages(c("bslib", "callr", "dbplyr", "deldir", "earth", "finetune", "forecast", "fracdiff", "future", "htmltools", "httpuv", "igraph", "infer", "lattice", "leaflet", "Matrix", "parsnip", "pkgbuild", "processx", "ragg", "RcppArmadillo", "RcppEigen", "remotes", "repr", "rsample", "rstudioapi", "sass", "sf", "shiny", "tidymodels", "tinytex", "tune", "workflowsets", "xfun", "yardstick"))
install.packages(c("bslib", "callr", "dbplyr", "deldir", "earth", "finetune", "forecast", "fracdiff", "future", "htmltools", "httpuv", "igraph", "infer", "lattice", "leaflet", "Matrix", "parsnip", "pkgbuild", "processx", "ragg", "RcppArmadillo", "RcppEigen", "remotes", "repr", "rsample", "rstudioapi", "sass", "sf", "shiny", "tidymodels", "tinytex", "tune", "workflowsets", "xfun", "yardstick"))
rsconnect::setAccountInfo(name='b1mjpu-sam-burk', token='C0ABCB7C95AD963684352B11312C548B', secret='8T/78j1x0a5gM6QFKdyXbUuWrZOKwTrWvHKy0k/5')
library(rsconnect)
rsconnect::deployApp('/Users/sburk/Documents/Data Visualizations/Shiny_Intro/app.R')
library(rsconnect)
rsconnect::deployApp('/Users/sburk/Documents/Data Visualizations/Shiny_Intro')
library(rsconnect)
rsconnect::deployApp('/Users/sburk/Documents/Data Visualizations/Shiny_Intro')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(dplyr)
library(maps)
library(plotly)
flights <- read.csv("rawflight.csv")
airports <- read.csv("airports.csv")
long_lat <- read.csv("airports_location.csv")
clean_ports <- airports %>%
transmute(
airport_id, name, state, city
) %>%
mutate(OriginAirportID=airport_id, OriginAirportID=as.numeric(OriginAirportID)) %>%
mutate(DestAirportID=airport_id, DestAirportID=as.numeric(DestAirportID))
clean_flights <- flights %>%
transmute(week_day=wday(DayOfWeek, label=T, abbr=T),
Carrier, DepDelay, ArrDelay, OriginAirportID, DestAirportID) %>%
mutate(OriginAirportID=as.numeric(OriginAirportID), DestAirportID=as.numeric(DestAirportID))
#Chicago airport id's: 13232, 13930
clean_flights %>%
#filter(!is.na(DepDelay), !is.na(ArrDelay)) %>%
ggplot() +
geom_density(aes(x = DepDelay, color = "DepDelay"), na.rm = TRUE) +  # Specify color as "DepDelay"
geom_density(aes(x = ArrDelay, color = "ArrDelay"), na.rm = TRUE) +  # Specify color as "ArrDelay"
geom_vline(xintercept = 0, linetype = "dashed") +
labs(
title = "Distribution of Departure and Arrival Delays",
x = "Delay (minutes)",
y = "Density",
color = "Delay Type",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
scale_x_continuous(limits = c(-120, 120)) +
scale_color_brewer(palette = "Dark2", labels = c("Arrival Delay", "Departure Delay"))  # Specify labels
clean_flights %>%
filter(!is.na(DepDelay), !is.na(ArrDelay)) %>%
group_by(week_day) %>%
summarize(avg_dep_delay = mean(DepDelay),
avg_arr_delay = mean(ArrDelay)) %>%
pivot_longer(cols = c(avg_dep_delay, avg_arr_delay),
names_to = "delay_type",
values_to = "avg_delay") %>%
ggplot(aes(x = week_day, y = avg_delay, fill = delay_type)) +
geom_col(position = "dodge") +
geom_text(position = position_dodge(width = .9), vjust = -0.45, aes(label=round(avg_delay, 2))) +
labs(
title = "Average Delay on Days of the Week",
x = "Day",
y = "Average Delay (minutes)",
fill = "Delay Type",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
scale_fill_brewer(palette = "Accent", labels = c("Arrival Delay", "Departure Delay"))
ave_delays_carrier <- clean_flights %>%
group_by(Carrier) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
arrange(desc(ave_departure_delay)) %>%
mutate(Carrier = factor(Carrier, levels = Carrier))
ggplot(ave_delays_carrier,
aes(x=Carrier, y=ave_departure_delay, fill=Carrier))+
geom_bar(stat="identity", alpha=.8) +
scale_fill_manual(values=c("#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62")) +
geom_text(aes(label=sprintf("%.2f", ave_departure_delay))) +
labs(title = "Average Departure Delay Over Different Airline",
subtitle = "All Airports",
y = "Average Departure Delay (Minutes)",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
theme(legend.position = "none")
chicago_land_airports <- clean_flights %>%
filter(OriginAirportID %in% c("13232", "13930"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(dplyr)
library(maps)
library(plotly)
flights <- read.csv("rawflight.csv")
airports <- read.csv("airports.csv")
long_lat <- read.csv("airports_location.csv")
clean_ports <- airports %>%
transmute(
airport_id, name, state, city
) %>%
mutate(OriginAirportID=airport_id, OriginAirportID=as.numeric(OriginAirportID)) %>%
mutate(DestAirportID=airport_id, DestAirportID=as.numeric(DestAirportID))
clean_flights <- flights %>%
transmute(week_day=wday(DayOfWeek, label=T, abbr=T),
Carrier, DepDelay, ArrDelay, OriginAirportID, DestAirportID) %>%
mutate(OriginAirportID=as.numeric(OriginAirportID), DestAirportID=as.numeric(DestAirportID))
#Chicago airport id's: 13232, 13930
clean_flights %>%
#filter(!is.na(DepDelay), !is.na(ArrDelay)) %>%
ggplot() +
geom_density(aes(x = DepDelay, color = "DepDelay"), na.rm = TRUE) +  # Specify color as "DepDelay"
geom_density(aes(x = ArrDelay, color = "ArrDelay"), na.rm = TRUE) +  # Specify color as "ArrDelay"
geom_vline(xintercept = 0, linetype = "dashed") +
labs(
title = "Distribution of Departure and Arrival Delays",
x = "Delay (minutes)",
y = "Density",
color = "Delay Type",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
scale_x_continuous(limits = c(-120, 120)) +
scale_color_brewer(palette = "Dark2", labels = c("Arrival Delay", "Departure Delay"))  # Specify labels
clean_flights %>%
filter(!is.na(DepDelay), !is.na(ArrDelay)) %>%
group_by(week_day) %>%
summarize(avg_dep_delay = mean(DepDelay),
avg_arr_delay = mean(ArrDelay)) %>%
pivot_longer(cols = c(avg_dep_delay, avg_arr_delay),
names_to = "delay_type",
values_to = "avg_delay") %>%
ggplot(aes(x = week_day, y = avg_delay, fill = delay_type)) +
geom_col(position = "dodge") +
geom_text(position = position_dodge(width = .9), vjust = -0.45, aes(label=round(avg_delay, 2))) +
labs(
title = "Average Delay on Days of the Week",
x = "Day",
y = "Average Delay (minutes)",
fill = "Delay Type",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
scale_fill_brewer(palette = "Accent", labels = c("Arrival Delay", "Departure Delay"))
ave_delays_carrier <- clean_flights %>%
group_by(Carrier) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
arrange(desc(ave_departure_delay)) %>%
mutate(Carrier = factor(Carrier, levels = Carrier))
ggplot(ave_delays_carrier,
aes(x=Carrier, y=ave_departure_delay, fill=Carrier))+
geom_bar(stat="identity", alpha=.8) +
scale_fill_manual(values=c("#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62")) +
geom_text(aes(label=sprintf("%.2f", ave_departure_delay))) +
labs(title = "Average Departure Delay Over Different Airline",
subtitle = "All Airports",
y = "Average Departure Delay (Minutes)",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
theme(legend.position = "none")
chicago_land_airports <- clean_flights %>%
filter(OriginAirportID %in% c("13232", "13930"))
ave_delays_carrier_chicago <- chicago_land_airports %>%
group_by(Carrier) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
arrange(desc(ave_departure_delay)) %>%
mutate(Carrier = factor(Carrier, levels = Carrier))
ggplot(ave_delays_carrier_chicago,
aes(x=Carrier, y=ave_departure_delay, fill=Carrier))+
geom_bar(stat="identity", alpha=.8) +
scale_fill_manual(values=c("#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5", "#fc8d62", "#66c2a5")) +
geom_text(aes(label=sprintf("%.2f", ave_departure_delay))) +
labs(title = "Average Departure Delay Over Different Airline",
subtitle = "Airports Midway and O'Hare",
y = "Average Departure Delay (Minutes)",
caption=" Data provided from:
https://www.kaggle.com/datasets/tylerx/flights-and-airports-data?resource=download&select=airports.csv") +
theme(legend.position = "none")
ave_delays_ports <- clean_flights %>%
group_by(OriginAirportID) %>%
summarize(ave_departure_delay = mean(DepDelay, na.rm = TRUE)) %>%
merge(.,clean_ports, by.x="OriginAirportID", by.y="airport_id")
ggplot(ave_delays_ports %>%
slice_max(ave_departure_delay, n=10),
aes(y=factor(name))
)
# cleaner_ports <- clean_ports
# leaner_ports$name <- gsub("Airport", "", cleaner_ports$name)
# long_lat$name <- gsub("Airport", "", long_lat$name)
# cleaner_ports$name <- trimws(cleaner_ports$name)
# long_lat$name <- trimws(long_lat$name)
# ports_with_location <- merge(cleaner_ports, long_lat, by = "name", all.x = TRUE) %>%
#  semi_join(clean_flights, by = c("airport_id" = "OriginAirportID"))
# ave_arr_delays_ports <- clean_flights %>%
#  group_by(DestAirportID) %>%
#  summarize(ave_arrival_delay = mean(ArrDelay, na.rm = TRUE)) %>%
#  merge(., clean_ports, by.x="DestAirportID", by.y="airport_id")
# ports_with_location <- read_csv("ports_with_location.csv")
# ports_with_location <- merge(ports_with_location, ave_delays_ports, by = "OriginAirportID", all.x = TRUE)
# ports_with_location <- merge(ports_with_location, ave_arr_delays_ports, by.x = "DestAirportID.x", by.y = "DestAirportID", all.x = TRUE)
# write.csv(ports_with_location, "ports_with_location.csv", row.names = FALSE)
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(RSocrata)
library(openintro)
library(mosaic)
library(lubridate)
library(dplyr)
library(maps)
library(plotly)
flights <- read.csv("rawflight.csv")
reticulate::repl_python()
shiny::runApp('Documents/Data Visualizations/Project_1')
runApp('Documents/Data Visualizations/Project_1')
reticulate::repl_python()
